#include "bone/black.h"

// make sure subsystem is enabled and make it usable for uio
&epwmss0 {
        status = "okay";

	// ask kernel to keep its clocks enabled at all times
        ti,no-idle;

	// map the full 4K address range of the subsystem
        ranges = <0x48300000 0x48300000 0x1000>;

	// The entire subsystem's registers is a single 4K page so we make a
	// uio device for that.  The submodule uio devices are mainly for the
	// irq (with the declared register ranges just being informative).
        uio@48300000 {
        	reg = <0x48300000 0x1000>;

        	compatible = "uio";
        	symlink = "uio/pwmss0/module";
        };
};


// This enables both ecap0 and eqep0 on P9.42 for flexibiliy, allowing
// - using eCAP as PWM output and eQEP for monitoring, or
// - using eCAP and/or eQEP to perform measurements on an external signal

// disable cape-universal for pins used:
USES_PIN( P9_42 );  // P9_42a  ecap 0 in/out
USES_PIN( P9_92 );  // P9_42b  eqep 0 in A

&am33xx_pinmux {
        ecap0_pins: ecap0 {
                pinctrl-single,pins = <
                        PIN_PULLDN( P9_42a, 0 )  // ecap 0 in/out
                >;
        };

        eqep0_pins: eqep0 {
                pinctrl-single,pins = <
                        PIN_PULLDN( P9_42b, 1 )  // eqep 0 in A
                >;
        };
};

&ecap0 {
        status = "okay";

        pinctrl-names = "default";
        pinctrl-0 = <&ecap0_pins>;

        compatible = "uio";
        symlink = "uio/pwmss0/cap";
};

&eqep0 {
        status = "okay";

        pinctrl-names = "default";
        pinctrl-0 = <&eqep0_pins>;

        compatible = "uio";
        symlink = "uio/pwmss0/qep";
};
